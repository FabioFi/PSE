ca65 V2.15 - Git 377f31d
Main file   : controller.s
Current file: controller.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.15 - Git 377f31d
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.15 - Git 377f31d"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.export		_main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; int __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; result_rdy= false;
000000r 1               ;
000000r 1  20 rr rr     	jsr     decsp8
000003r 1  A2 00        	ldx     #$00
000005r 1  A9 00        	lda     #$00
000007r 1  A0 00        	ldy     #$00
000009r 1  91 rr        	sta     (sp),y
00000Br 1               ;
00000Br 1               ; while(1){
00000Br 1               ;
00000Br 1  4C rr rr     	jmp     L0006
00000Er 1               ;
00000Er 1               ; data = accelerometer;
00000Er 1               ;
00000Er 1  A0 07        L0004:	ldy     #$07
000010r 1  20 rr rr     	jsr     ldaxysp
000013r 1  A0 04        	ldy     #$04
000015r 1  20 rr rr     	jsr     staxysp
000018r 1               ;
000018r 1               ; data_rdy = true;
000018r 1               ;
000018r 1  A2 00        	ldx     #$00
00001Ar 1  A9 01        	lda     #$01
00001Cr 1  A0 01        	ldy     #$01
00001Er 1  91 rr        	sta     (sp),y
000020r 1               ;
000020r 1               ; while(!result_rdy);  // blocked until new values from the Gain
000020r 1               ;
000020r 1  4C rr rr     	jmp     L000E
000023r 1  A0 00        L000E:	ldy     #$00
000025r 1  A2 00        	ldx     #$00
000027r 1  B1 rr        	lda     (sp),y
000029r 1  20 rr rr     	jsr     bnega
00002Cr 1  D0 F5        	jne     L000E
00002Er 1               ;
00002Er 1               ; data_rdy  = false;  // disabled by the memory
00002Er 1               ;
00002Er 1  A2 00        	ldx     #$00
000030r 1  A9 00        	lda     #$00
000032r 1  A0 01        	ldy     #$01
000034r 1  91 rr        	sta     (sp),y
000036r 1               ;
000036r 1               ; result_rdy  = false;
000036r 1               ;
000036r 1  A2 00        	ldx     #$00
000038r 1  A9 00        	lda     #$00
00003Ar 1  A0 00        	ldy     #$00
00003Cr 1  91 rr        	sta     (sp),y
00003Er 1               ;
00003Er 1               ; while(1){
00003Er 1               ;
00003Er 1  4C rr rr     L0006:	jmp     L0004
000041r 1               ;
000041r 1               ; return 0;
000041r 1               ;
000041r 1  A2 00        	ldx     #$00
000043r 1  A9 00        	lda     #$00
000045r 1  4C rr rr     	jmp     L0001
000048r 1               ;
000048r 1               ; }
000048r 1               ;
000048r 1  20 rr rr     L0001:	jsr     incsp8
00004Br 1  60           	rts
00004Cr 1               
00004Cr 1               .endproc
00004Cr 1               
00004Cr 1               
